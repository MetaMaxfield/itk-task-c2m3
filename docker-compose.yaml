networks:
  dev:

services:
  backend:
    container_name: event_face_container
    build:
      context: .
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - dev

  postgres:
    image: postgres:17.5-alpine
    container_name: postgresql_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - dev

  redis:
    image: redis:8.2.1-alpine
    container_name: redis_container
    command:
      - redis-server
      - --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    restart: unless-stopped
    networks:
      - dev

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local